(ns paragon.core-test
  (:require [clojure.test :refer :all]
            [paragon.core :refer :all]))

(deftest test-contraction
  (let [jg (-> (new-just-graph)
               (premise :strokeA :a)
               (premise :strokeB :b)
               (premise :strokeC :c)
               (forall-just [:a :b :c] :strokeD)
               (exists-just [:strokeD] :d)
               (assert-color :strokeA :black)
               (assert-color :strokeB :black)
               (assert-color :strokeC :black)
               (assert-color :a :black)
               (assert-color :b :black)
               (assert-color :c :black)
               (assert-color :strokeD :black)
               (assert-color :d :black))
        jg-contract-strokeA (contract jg :strokeA)
        jg-contract-strokeB (contract jg :strokeB)
        jg-contract-strokeC (contract jg :strokeC)
        jg-contract-strokeD (contract jg :strokeD)
        jg-contract-a (contract jg :a)
        jg-contract-b (contract jg :b)
        jg-contract-c (contract jg :c)
        jg-contract-d (contract jg :d)]
    (is (check-axioms-debug jg))
    (is (empty? (unbelieved jg)))
    (is (= #{:a :b :c :d} (set (believed jg))))
    (is (check-axioms-debug jg-contract-strokeA))
    (is (= :white (jgcolor jg-contract-strokeA :strokeA)))
    (is (check-axioms-debug jg-contract-strokeB))
    (is (= :white (jgcolor jg-contract-strokeB :strokeB)))
    (is (check-axioms-debug jg-contract-strokeC))
    (is (= :white (jgcolor jg-contract-strokeC :strokeC)))
    (is (check-axioms-debug jg-contract-strokeD))
    (is (= :white (jgcolor jg-contract-strokeD :strokeD)))
    (is (check-axioms-debug jg-contract-a))
    (is (= :white (jgcolor jg-contract-a :a)))
    (is (check-axioms-debug jg-contract-b))
    (is (= :white (jgcolor jg-contract-b :b)))
    (is (check-axioms-debug jg-contract-c))
    (is (= :white (jgcolor jg-contract-c :c)))
    (is (check-axioms-debug jg-contract-d))
    (is (= :white (jgcolor jg-contract-d :d)))))

(deftest test-expansion
  (let [jg (-> (new-just-graph)
               (premise :strokeA :a)
               (premise :strokeB :b)
               (premise :strokeC :c)
               (forall-just [:a :b :c] :strokeD)
               (exists-just [:strokeD] :d)
               (assert-color :strokeA :white)
               (assert-color :strokeB :white)
               (assert-color :strokeC :white)
               (assert-color :a :white)
               (assert-color :b :white)
               (assert-color :c :white)
               (assert-color :strokeD :white)
               (assert-color :d :white))
        jg-expand-strokeA (expand jg :strokeA)
        jg-expand-strokeB (expand jg :strokeB)
        jg-expand-strokeC (expand jg :strokeC)
        jg-expand-strokeD (expand jg :strokeD)
        jg-expand-a (expand jg :a)
        jg-expand-b (expand jg :b)
        jg-expand-c (expand jg :c)
        jg-expand-d (expand jg :d)]
    (is (check-axioms-debug jg))
    (is (empty? (believed jg)))
    (is (= #{:a :b :c :d} (set (unbelieved jg))))
    (is (check-axioms-debug jg-expand-strokeA))
    (is (= :black (jgcolor jg-expand-strokeA :strokeA)))
    (is (= :black (jgcolor jg-expand-strokeA :a)))
    (is (= :white (jgcolor jg-expand-strokeA :strokeD)))
    (is (= :white (jgcolor jg-expand-strokeA :d)))
    (is (= :white (jgcolor jg-expand-strokeA :strokeC)))
    (is (= :white (jgcolor jg-expand-strokeA :strokeB)))
    (is (= :white (jgcolor jg-expand-strokeA :c)))
    (is (= :white (jgcolor jg-expand-strokeA :b)))
    (is (check-axioms-debug jg-expand-strokeB))
    (is (= :black (jgcolor jg-expand-strokeB :strokeB)))
    (is (check-axioms-debug jg-expand-strokeC))
    (is (= :black (jgcolor jg-expand-strokeC :strokeC)))
    (is (check-axioms-debug jg-expand-strokeD))
    (is (and (every? (fn [n] (= :black (jgcolor jg-expand-strokeD n))) (nodes jg-expand-strokeD))
             (every? (fn [s] (= :black (jgcolor jg-expand-strokeD s))) (strokes jg-expand-strokeD))))
    (is (check-axioms-debug jg-expand-a))
    (is (= :black (jgcolor jg-expand-a :a)))
    (is (= :black (jgcolor jg-expand-a :strokeA)))
    (is (= :white (jgcolor jg-expand-a :strokeD)))
    (is (= :white (jgcolor jg-expand-a :d)))
    (is (check-axioms-debug jg-expand-b))
    (is (= :black (jgcolor jg-expand-b :b)))
    (is (check-axioms-debug jg-expand-c))
    (is (= :black (jgcolor jg-expand-c :c)))
    (is (check-axioms-debug jg-expand-d))
    (is (= :black (jgcolor jg-expand-d :d)))
    (is (and (every? (fn [n] (= :black (jgcolor jg-expand-d n))) (nodes jg-expand-d))
             (every? (fn [s] (= :black (jgcolor jg-expand-d s))) (strokes jg-expand-d))))))

(deftest test-inconsistencies
  (let [jg (-> (new-just-graph)
               (premise :strokeA :a)
               (premise :strokeB :b)
               (premise :strokeC :c)
               (forall-just [:a :b :c] :strokeD)
               (exists-just [:strokeD] :d)
               (assert-color :strokeA :white)
               (assert-color :strokeB :white)
               (assert-color :strokeC :white)
               (assert-color :a :white)
               (assert-color :b :white)
               (assert-color :c :white)
               (assert-color :strokeD :white)
               (assert-color :d :white)
               (add-inconsistencies [:a :b :c]))
        jg-expand-a (expand jg :a)
        jg-expand-b (expand jg :b)
        jg-expand-c (expand jg :c)
        jg-expand-d (expand jg :d)
        jg-expand-ab (-> jg (expand :a) (expand :b))
        jg-expand-bc (-> jg (expand :b) (expand :c))
        jg-expand-ac (-> jg (expand :a) (expand :c))
        jg-expand-abc (-> jg (expand :a) (expand :b) (expand :c))
        jg-expand-acb (-> jg (expand :a) (expand :c) (expand :b))
        jg-expand-bac (-> jg (expand :b) (expand :a) (expand :c))
        jg-expand-bca (-> jg (expand :b) (expand :c) (expand :a))
        jg-expand-cba (-> jg (expand :c) (expand :b) (expand :a))
        jg-expand-cab (-> jg (expand :c) (expand :a) (expand :b))
        jg-expand-d (-> jg (expand :d))]
    (is (= #{:a} (set (believed jg-expand-a))))
    (is (= #{:b} (set (believed jg-expand-b))))
    (is (= #{:c} (set (believed jg-expand-c))))
    (is (= #{:a :b} (set (believed jg-expand-ab))))
    (is (= #{:b :c} (set (believed jg-expand-bc))))
    (is (= #{:a :c} (set (believed jg-expand-ac))))
    (is (not= #{:a :b :c} (set (believed jg-expand-abc))))
    (is (not= #{:a :b :c} (set (believed jg-expand-acb))))
    (is (not= #{:a :b :c} (set (believed jg-expand-bac))))
    (is (not= #{:a :b :c} (set (believed jg-expand-bca))))
    (is (not= #{:a :b :c} (set (believed jg-expand-cba))))
    (is (not= #{:a :b :c} (set (believed jg-expand-cab))))
    (is (not= #{:a :b :c :d} (set (believed jg-expand-d))))))
